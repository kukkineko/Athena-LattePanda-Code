// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const UUIDWrapper = require('../../generated/unique_identifier_msgs/unique_identifier_msgs__msg__UUID.js');
const DummyBehavior_FeedbackWrapper = require('../../generated/nav2_msgs/nav2_msgs__action__DummyBehavior_Feedback.js');
const DummyBehavior_FeedbackMessageRefStruct = StructType({
  goal_id: UUIDWrapper.refObjectType,
  feedback: DummyBehavior_FeedbackWrapper.refObjectType,
});
const DummyBehavior_FeedbackMessageRefArray = ArrayType(DummyBehavior_FeedbackMessageRefStruct);
const DummyBehavior_FeedbackMessageRefStructArray = StructType({
  data: DummyBehavior_FeedbackMessageRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class DummyBehavior_FeedbackMessageWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new DummyBehavior_FeedbackMessageRefStruct(other._refObject.toObject());
      this._wrapperFields.goal_id =  new UUIDWrapper(other._wrapperFields.goal_id);
      this._wrapperFields.feedback =  new DummyBehavior_FeedbackWrapper(other._wrapperFields.feedback);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new DummyBehavior_FeedbackMessageRefStruct();
    this._wrapperFields.goal_id = new UUIDWrapper();
    this._wrapperFields.feedback = new DummyBehavior_FeedbackWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new DummyBehavior_FeedbackMessageWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new DummyBehavior_FeedbackMessageArrayWrapper;
  }
  static get ArrayType() {
    return DummyBehavior_FeedbackMessageArrayWrapper;
  }
  static get refObjectArrayType() {
    return DummyBehavior_FeedbackMessageRefStructArray
  }
  static get refObjectType() {
    return DummyBehavior_FeedbackMessageRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
    }
    this._wrapperFields.goal_id.freeze(own, checkConsistency);
    this._refObject.goal_id = this._wrapperFields.goal_id.refObject;
    this._wrapperFields.feedback.freeze(own, checkConsistency);
    this._refObject.feedback = this._wrapperFields.feedback.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.goal_id.copyRefObject(refObject.goal_id);
    this._wrapperFields.feedback.copyRefObject(refObject.feedback);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    UUIDWrapper.freeStruct(refObject.goal_id);
    DummyBehavior_FeedbackWrapper.freeStruct(refObject.feedback);
  }
  static destoryRawROS(msg) {
    DummyBehavior_FeedbackMessageWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'nav2_msgs', subFolder: 'action', interfaceName: 'DummyBehavior_FeedbackMessage'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get goal_id() {
    return this._wrapperFields.goal_id;
  }
  set goal_id(value) {
    if (value instanceof UUIDWrapper) {
      this._wrapperFields.goal_id.copy(value);
    } else {
      this._wrapperFields.goal_id.copy(new UUIDWrapper(value));
    }
  }
  get feedback() {
    return this._wrapperFields.feedback;
  }
  set feedback(value) {
    if (value instanceof DummyBehavior_FeedbackWrapper) {
      this._wrapperFields.feedback.copy(value);
    } else {
      this._wrapperFields.feedback.copy(new DummyBehavior_FeedbackWrapper(value));
    }
  }
  copyRefObject(refObject) {
    this._refObject = new DummyBehavior_FeedbackMessageRefStruct(refObject.toObject());
    this._wrapperFields.goal_id.copyRefObject(this._refObject.goal_id);
    this._wrapperFields.feedback.copyRefObject(this._refObject.feedback);
  }
  copy(other) {
    this._refObject = new DummyBehavior_FeedbackMessageRefStruct(other._refObject.toObject());
    this._wrapperFields.goal_id.copy(other._wrapperFields.goal_id);
    this._wrapperFields.feedback.copy(other._wrapperFields.feedback);
  }
  static get classType() {
    return DummyBehavior_FeedbackMessageWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"goal_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":null,"pkgName":"unique_identifier_msgs","type":"UUID","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"feedback","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":null,"pkgName":"nav2_msgs","type":"DummyBehavior_Feedback","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"nav2_msgs","type":"DummyBehavior_FeedbackMessage","stringUpperBound":null,"isPrimitiveType":false},"msgName":"DummyBehavior_FeedbackMessage"};
  }
  hasMember(name) {
    let memberNames = ["goal_id","feedback"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class DummyBehavior_FeedbackMessageArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof DummyBehavior_FeedbackMessageWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new DummyBehavior_FeedbackMessageWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to DummyBehavior_FeedbackMessageArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to DummyBehavior_FeedbackMessageArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new DummyBehavior_FeedbackMessageRefArray(size);
    this._refObject = new DummyBehavior_FeedbackMessageRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new DummyBehavior_FeedbackMessageWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof DummyBehavior_FeedbackMessageArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "DummyBehavior_FeedbackMessageArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      DummyBehavior_FeedbackMessageWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return DummyBehavior_FeedbackMessageWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return DummyBehavior_FeedbackMessageArrayWrapper;
  }
}
module.exports = DummyBehavior_FeedbackMessageWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "goal_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": null,
        "pkgName": "unique_identifier_msgs",
        "type": "UUID",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "feedback",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": null,
        "pkgName": "nav2_msgs",
        "type": "DummyBehavior_Feedback",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "nav2_msgs",
    "type": "DummyBehavior_FeedbackMessage",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "DummyBehavior_FeedbackMessage"
}
*/
